// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 11.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace Phinite.Test
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// ClickRegexpInputStepByStep
        /// </summary>
        public void ClickRegexpInputStepByStep()
        {
            #region Variable Declarations
            WpfButton uIOptionStepByStepButton = this.UINITEWindow.UIOptionStepByStepButton;
            #endregion

            // Click 'OptionStepByStep' button
            Mouse.Click(uIOptionStepByStepButton, new Point(52, 11));
        }
        
        /// <summary>
        /// ClickParseTreeStepByStep
        /// </summary>
        public void ClickParseTreeStepByStep()
        {
            #region Variable Declarations
            WpfButton uIItemButton = this.UINITEWindow.UIItemButton;
            #endregion

            // Click button numbered 5 in 'NITE' window
            Mouse.Click(uIItemButton, new Point(16, 9));
        }
        
        /// <summary>
        /// ClickAbort
        /// </summary>
        public void ClickAbort()
        {
            #region Variable Declarations
            WpfButton uIOptionAbortButton = this.UINITEWindow.UIOptionAbortButton;
            #endregion

            // Click 'OptionAbort' button
            Mouse.Click(uIOptionAbortButton, new Point(21, 10));
        }
        
        /// <summary>
        /// ClickExit
        /// </summary>
        public void ClickExit()
        {
            #region Variable Declarations
            WpfMenuItem uIExitMenuItem = this.UINITEWindow.UIMenuMainMenu.UIExitMenuItem;
            #endregion

            // Click 'Exit' menu item
            Mouse.Click(uIExitMenuItem, new Point(11, 9));
        }
        
        /// <summary>
        /// ClickExampleYay
        /// </summary>
        public void ClickExampleYay()
        {
            #region Variable Declarations
            WpfMenuItem uILoadexampleMenuItem = this.UINITEWindow.UIMenuMainMenu.UILoadexampleMenuItem;
            WpfMenuItem uIYayABCDEFGHIJKLMNMenuItem = this.UINITEWindow.UIMenuMainMenu.UILoadexampleMenuItem.UIYayABCDEFGHIJKLMNMenuItem;
            #endregion

            // Click 'Load example' menu item
            Mouse.Click(uILoadexampleMenuItem, new Point(13, 10));

            // Click 'Load example' -> 'Yay!, "(A^+B^*C^+D^*E^+F^*G^+H^*I^+J^*K^+L^*M^+N^*...' menu item
            Mouse.Click(uIYayABCDEFGHIJKLMNMenuItem, new Point(34, 11));
        }
        
        /// <summary>
        /// ClickRegexpInputImmediate
        /// </summary>
        public void ClickRegexpInputImmediate()
        {
            #region Variable Declarations
            WpfButton uIOptionImmediateButton = this.UINITEWindow.UIOptionImmediateButton;
            #endregion

            // Click 'OptionImmediate' button
            Mouse.Click(uIOptionImmediateButton, new Point(21, 10));
        }
        
        /// <summary>
        /// ClickEvaluate
        /// </summary>
        public void ClickEvaluate()
        {
            #region Variable Declarations
            WpfButton uIOptionEvaluateButton = this.UINITEWindow.UIOptionEvaluateButton;
            #endregion

            // Click 'OptionEvaluate' button
            Mouse.Click(uIOptionEvaluateButton, new Point(18, 10));
        }
        
        /// <summary>
        /// ClickWordInputImmediate
        /// </summary>
        public void ClickWordInputImmediate()
        {
            #region Variable Declarations
            WpfButton uIOptionImmediateEvaluButton = this.UINITEWindow.UIOptionImmediateEvaluButton;
            #endregion

            // Click 'OptionImmediateEvaluation' button
            Mouse.Click(uIOptionImmediateEvaluButton, new Point(20, 10));
        }
        
        /// <summary>
        /// ClickFirstScreen
        /// </summary>
        public void ClickFirstScreen()
        {
            #region Variable Declarations
            WpfButton uIGobacktofirstscreenButton = this.UINITEWindow.UIGobacktofirstscreenButton;
            #endregion

            // Click 'Go back to first screen' button
            Mouse.Click(uIGobacktofirstscreenButton, new Point(14, 10));
        }
        
        /// <summary>
        /// ClickExampleEmptyWord
        /// </summary>
        public void ClickExampleEmptyWord()
        {
            #region Variable Declarations
            WpfMenuItem uIEmptywordMenuItem = this.UINITEWindow.UIMenuMainMenu.UILoadexampleMenuItem.UIEmptywordMenuItem;
            #endregion

            // Click 'Load example' -> 'Empty word, "."' menu item
            Mouse.Click(uIEmptywordMenuItem, new Point(40, 9));
        }
        
        /// <summary>
        /// ClickExampleConcatenation
        /// </summary>
        public void ClickExampleConcatenation()
        {
            #region Variable Declarations
            WpfMenuItem uIConcatenationababaMenuItem = this.UINITEWindow.UIMenuMainMenu.UILoadexampleMenuItem.UIConcatenationababaMenuItem;
            #endregion

            // Click 'Load example' -> 'Concatenation, "ababa"' menu item
            Mouse.Click(uIConcatenationababaMenuItem, new Point(43, 12));
        }
        
        /// <summary>
        /// AssertRegexpInputTextEqual - Use 'AssertRegexpInputTextEqualExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertRegexpInputTextEqual(string expectedInput)
        {
            #region Variable Declarations
            WpfEdit uIInputEdit = this.UINITEWindow.UIInputEdit;
            #endregion

				// TODO: delete the following field from this class
			   // this.AssertRegexpInputTextEqualExpectedValues.UIInputEditText

            // Verify that the 'Text' property of 'Input' text box equals 'ababa'
				Assert.AreEqual(this.UINITEWindow.UIInputEdit.Text, expectedInput,
					String.Format("expected regexp input box text equal to {0} but it is equal to {1}", expectedInput,
					this.UINITEWindow.UIInputEdit.Text));
        }
        
        #region Properties
        public virtual AssertRegexpInputTextEqualExpectedValues AssertRegexpInputTextEqualExpectedValues
        {
            get
            {
                if ((this.mAssertRegexpInputTextEqualExpectedValues == null))
                {
                    this.mAssertRegexpInputTextEqualExpectedValues = new AssertRegexpInputTextEqualExpectedValues();
                }
                return this.mAssertRegexpInputTextEqualExpectedValues;
            }
        }
        
        public UINITEWindow UINITEWindow
        {
            get
            {
                if ((this.mUINITEWindow == null))
                {
                    this.mUINITEWindow = new UINITEWindow();
                }
                return this.mUINITEWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertRegexpInputTextEqualExpectedValues mAssertRegexpInputTextEqualExpectedValues;
        
        private UINITEWindow mUINITEWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertRegexpInputTextEqual'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class AssertRegexpInputTextEqualExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Input' text box equals 'ababa'
        /// </summary>
        public string UIInputEditText = "ababa";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UINITEWindow : WpfWindow
    {
        
        public UINITEWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "NITE";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("NITE");
            #endregion
        }
        
        #region Properties
        public WpfButton UIOptionStepByStepButton
        {
            get
            {
                if ((this.mUIOptionStepByStepButton == null))
                {
                    this.mUIOptionStepByStepButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIOptionStepByStepButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "OptionStepByStep";
                    this.mUIOptionStepByStepButton.WindowTitles.Add("NITE");
                    #endregion
                }
                return this.mUIOptionStepByStepButton;
            }
        }
        
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.Instance] = "5";
                    this.mUIItemButton.WindowTitles.Add("NITE");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public WpfButton UIOptionAbortButton
        {
            get
            {
                if ((this.mUIOptionAbortButton == null))
                {
                    this.mUIOptionAbortButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIOptionAbortButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "OptionAbort";
                    this.mUIOptionAbortButton.WindowTitles.Add("NITE");
                    #endregion
                }
                return this.mUIOptionAbortButton;
            }
        }
        
        public UIMenuMainMenu UIMenuMainMenu
        {
            get
            {
                if ((this.mUIMenuMainMenu == null))
                {
                    this.mUIMenuMainMenu = new UIMenuMainMenu(this);
                }
                return this.mUIMenuMainMenu;
            }
        }
        
        public WpfButton UIOptionImmediateButton
        {
            get
            {
                if ((this.mUIOptionImmediateButton == null))
                {
                    this.mUIOptionImmediateButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIOptionImmediateButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "OptionImmediate";
                    this.mUIOptionImmediateButton.WindowTitles.Add("NITE");
                    #endregion
                }
                return this.mUIOptionImmediateButton;
            }
        }
        
        public WpfButton UIOptionEvaluateButton
        {
            get
            {
                if ((this.mUIOptionEvaluateButton == null))
                {
                    this.mUIOptionEvaluateButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIOptionEvaluateButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "OptionEvaluate";
                    this.mUIOptionEvaluateButton.WindowTitles.Add("NITE");
                    #endregion
                }
                return this.mUIOptionEvaluateButton;
            }
        }
        
        public WpfButton UIOptionImmediateEvaluButton
        {
            get
            {
                if ((this.mUIOptionImmediateEvaluButton == null))
                {
                    this.mUIOptionImmediateEvaluButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIOptionImmediateEvaluButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "OptionImmediateEvaluation";
                    this.mUIOptionImmediateEvaluButton.WindowTitles.Add("NITE");
                    #endregion
                }
                return this.mUIOptionImmediateEvaluButton;
            }
        }
        
        public WpfButton UIGobacktofirstscreenButton
        {
            get
            {
                if ((this.mUIGobacktofirstscreenButton == null))
                {
                    this.mUIGobacktofirstscreenButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIGobacktofirstscreenButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "OptionEvalFinalize";
                    this.mUIGobacktofirstscreenButton.WindowTitles.Add("NITE");
                    #endregion
                }
                return this.mUIGobacktofirstscreenButton;
            }
        }
        
        public WpfEdit UIInputEdit
        {
            get
            {
                if ((this.mUIInputEdit == null))
                {
                    this.mUIInputEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIInputEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "Input";
                    this.mUIInputEdit.WindowTitles.Add("NITE");
                    #endregion
                }
                return this.mUIInputEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIOptionStepByStepButton;
        
        private WpfButton mUIItemButton;
        
        private WpfButton mUIOptionAbortButton;
        
        private UIMenuMainMenu mUIMenuMainMenu;
        
        private WpfButton mUIOptionImmediateButton;
        
        private WpfButton mUIOptionEvaluateButton;
        
        private WpfButton mUIOptionImmediateEvaluButton;
        
        private WpfButton mUIGobacktofirstscreenButton;
        
        private WpfEdit mUIInputEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UIMenuMainMenu : WpfMenu
    {
        
        public UIMenuMainMenu(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenu.PropertyNames.AutomationId] = "MenuMain";
            this.WindowTitles.Add("NITE");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UIExitMenuItem
        {
            get
            {
                if ((this.mUIExitMenuItem == null))
                {
                    this.mUIExitMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIExitMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Exit";
                    this.mUIExitMenuItem.WindowTitles.Add("NITE");
                    #endregion
                }
                return this.mUIExitMenuItem;
            }
        }
        
        public UILoadexampleMenuItem UILoadexampleMenuItem
        {
            get
            {
                if ((this.mUILoadexampleMenuItem == null))
                {
                    this.mUILoadexampleMenuItem = new UILoadexampleMenuItem(this);
                }
                return this.mUILoadexampleMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUIExitMenuItem;
        
        private UILoadexampleMenuItem mUILoadexampleMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "11.0.50727.1")]
    public class UILoadexampleMenuItem : WpfMenuItem
    {
        
        public UILoadexampleMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfMenuItem.PropertyNames.AutomationId] = "MenuExamples";
            this.WindowTitles.Add("NITE");
            #endregion
        }
        
        #region Properties
        public WpfMenuItem UIYayABCDEFGHIJKLMNMenuItem
        {
            get
            {
                if ((this.mUIYayABCDEFGHIJKLMNMenuItem == null))
                {
                    this.mUIYayABCDEFGHIJKLMNMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIYayABCDEFGHIJKLMNMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Yay!, \"(A^+B^*C^+D^*E^+F^*G^+H^*I^+J^*K^+L^*M^+N^*O^+P^*R^+S^*T^+U^*V^+W^*X^+Y^*Z" +
                        "^+)^*\"";
                    this.mUIYayABCDEFGHIJKLMNMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIYayABCDEFGHIJKLMNMenuItem.WindowTitles.Add("NITE");
                    #endregion
                }
                return this.mUIYayABCDEFGHIJKLMNMenuItem;
            }
        }
        
        public WpfMenuItem UIEmptywordMenuItem
        {
            get
            {
                if ((this.mUIEmptywordMenuItem == null))
                {
                    this.mUIEmptywordMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIEmptywordMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Empty word, \".\"";
                    this.mUIEmptywordMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIEmptywordMenuItem.WindowTitles.Add("NITE");
                    #endregion
                }
                return this.mUIEmptywordMenuItem;
            }
        }
        
        public WpfMenuItem UIConcatenationababaMenuItem
        {
            get
            {
                if ((this.mUIConcatenationababaMenuItem == null))
                {
                    this.mUIConcatenationababaMenuItem = new WpfMenuItem(this);
                    #region Search Criteria
                    this.mUIConcatenationababaMenuItem.SearchProperties[WpfMenuItem.PropertyNames.Name] = "Concatenation, \"ababa\"";
                    this.mUIConcatenationababaMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIConcatenationababaMenuItem.WindowTitles.Add("NITE");
                    #endregion
                }
                return this.mUIConcatenationababaMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfMenuItem mUIYayABCDEFGHIJKLMNMenuItem;
        
        private WpfMenuItem mUIEmptywordMenuItem;
        
        private WpfMenuItem mUIConcatenationababaMenuItem;
        #endregion
    }
}
